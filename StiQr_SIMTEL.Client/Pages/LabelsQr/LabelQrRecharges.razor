@page "/LabelQrRecharge"
@using System.Text.RegularExpressions;
@using Newtonsoft.Json;
@using StiQr_SIMTEL.Client.Models;
@using StiQr_SIMTEL.Client.Services;
@using StiQr_SIMTEL.Shared.LabelsQR;
@using System.IdentityModel.Tokens.Jwt;
@inject IAppService AppService;
@inject NavigationManager NavManager;

<h2>Recarga de Etiqueta</h2>

<EditForm Model="@searchModel" OnValidSubmit="SearchPlate">
    <div class="mb-3">
        <label class="form-label">Ingrese la Placa</label>
        <div class="input-group">
            <input type="text" class="form-control" aria-describedby="basic-addon3 basic-addon4"
                   placeholder="XXX" @bind="searchModel.PlateCode" @oninput="ValidateCode" maxlength="3" />
            <span class="input-group-text" id="basic-addon3">-</span>
            <input type="text" class="form-control" aria-describedby="basic-addon3 basic-addon4"
                   placeholder="1234" @bind-value="searchModel.PlateNumber" @oninput="ValidateNumber" maxlength="4" />
            <button type="button" class="btn btn-secondary" id="basic-addon1" @onclick="SearchPlate">
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
            </button>
        </div>
        <div class="form-text --bs-danger-text-emphasis" id="basic-addon4">@errorText</div>
        <div class="form-text @textClass" id="basic-addon4">@infoText</div>
    </div>
</EditForm>

<div style="display: flex; justify-content: center;">
    <div style="position: relative; width: 325px; height: 200px;">
        <img src="img/plate.png" alt="Plate" style="width: 100%; height: 100%;" />
        @if (@_isSearching)
        {
            <div style="position: absolute; top: 45%; left: 45%;">
                <div class="spinner-border" style="width: 2rem; height: 2rem; color:#144883; " role="status" />
            </div>
        }
        else
        {
            <p class="fs-1" style="position: absolute; top: 40%; left: 23%; overflow-y: auto;"> <span class="@_spinnerClass" role="status" aria-hiden="true"></span>@plateText</p>
        }

        
    </div>
</div>



<div class="mb-3">
    <div class="input-group">
        <span class="input-group-text">$</span>
        <input type="text" class="form-control" inputmode="numeric" pattern="[0-9]*" maxlength="2" @bind-value="rechargeDTO.CashAmount">
        <span class="input-group-text">.00</span>
        <button type="button" class=" btn btn-secondary" @onclick="MostrarConfirmacion">
            <span class="oi oi-dollar" aria-hidden="true"></span> Recargar
        </button>
    </div>

</div>


@if (mostrarModal)
{
    <div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Recarga</h5>

                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas Recargar $@rechargeDTO.CashAmount a la etiqueta con placa @labelDTO.Plate ?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarConfirmacion">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="AceptarConfirmacion">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    string plateText = "";
    string textClass = "--bs-danger-text-emphasis";
    string errorText = "";
    string infoText = "";
    string _spinnerClass = "";
    bool _isSearching = false;
    string _codeStr = "";
    SearchPlate searchModel = new();
    GetLabelQrDTO labelDTO;
    RechargeCashDTO rechargeDTO = new();
    UserBasicDetail userRecharger = new();
    protected async override Task OnInitializedAsync()
    {
        string userDetails = await SecureStorage.GetAsync(nameof(Setting.UserBasicDetail));

        if (!string.IsNullOrWhiteSpace(userDetails))
        {
            var userBasicDetail = JsonConvert.DeserializeObject<UserBasicDetail>(userDetails);
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(userBasicDetail.Token) as JwtSecurityToken;
            if (jsonToken.ValidTo > DateTime.UtcNow)
            {
                userRecharger = userBasicDetail;
            }
        }
        else
        {
            NavManager.NavigateTo("/LoginPage");
        }
    }
    private bool mostrarModal = false;

    private void MostrarConfirmacion()
    {
        if (labelDTO!=null){

            if (rechargeDTO.CashAmount < 1 || rechargeDTO.CashAmount>20)
            {
                errorText = "Por favor, Ingrese un monto entre $1 - $20";
            }
            else
            {
                mostrarModal = true;
            }
        }
        else
        {
            errorText = "Por favor, primero digite la placa a recargar";
        }
        this.StateHasChanged();
    }

    private void CerrarConfirmacion()
    {
        mostrarModal = false;
    }

    private void AceptarConfirmacion()
    {
        // Aquí puedes ejecutar la acción que desees después de que el usuario confirme.
        mostrarModal = false;
        RechargeLabelQr();
    }

    private async void SearchPlate()
    {
        labelDTO = null;
        plateText = "";
        errorText = "";
        _isSearching = true;
        var response = await AppService.GetLabelQrByPlate(searchModel.PlateCode + "-" + searchModel.PlateNumber);
        _isSearching = false;
        if (!String.IsNullOrWhiteSpace(response.ErrorMessage))
        {
            // await App.Current.MainPage.DisplayAlert("Oops", response.ErrorMessage, "OK");
            errorText = "Oops " + response.ErrorMessage;
        }
        else
        {

            plateText = searchModel.PlateCode + "-" + searchModel.PlateNumber;
            labelDTO = response.LabelQr;
        }
        this.StateHasChanged();
    }
    private async void RechargeLabelQr()
    {

        rechargeDTO.IdLabelQr = labelDTO.Id;
        rechargeDTO.IdUserRecharger = userRecharger.UserID;

        var response = await AppService.RechargeLabelQr(rechargeDTO);
        if (!String.IsNullOrWhiteSpace(response.ErrorMessage))
        {
            await App.Current.MainPage.DisplayAlert("Oops", response.ErrorMessage, "OK");
            errorText = "Oops" + response.ErrorMessage;

        }
        else
        {

            await App.Current.MainPage.DisplayAlert("Success", response.ConfirmMessage, "OK");
        }
        this.StateHasChanged();
    }

    private void ValidateCode(ChangeEventArgs e)
    {
        errorText = "";
        string nuevoValor = e.Value.ToString();
        if (!Regex.IsMatch(nuevoValor, "^[A-Za-z]*$"))
        {
            searchModel.PlateCode = _codeStr;
        }
        else
        {
            _codeStr = searchModel.PlateCode;
        }
        this.StateHasChanged();
    }

    private void ValidateNumber(ChangeEventArgs e)
    {
        string input = e.Value?.ToString();
        if (!int.TryParse(input, out int number) || number < 0 || input.Length != 4)
        {
            // El valor ingresado no es un número no negativo de 4 dígitos
            // Puedes mostrar un mensaje de error o realizar otras acciones
        }
        else
        {
            // El valor ingresado es válido
            searchModel.PlateNumber = input;
        }
        this.StateHasChanged();
    }
}
