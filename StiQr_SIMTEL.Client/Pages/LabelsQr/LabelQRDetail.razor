@page "/LabelQRDetail"
@using CommunityToolkit.Maui.Views;
@using Newtonsoft.Json;
@using StiQr_SIMTEL.Client.MauiPages;
@using StiQr_SIMTEL.Client.Models;
@using StiQr_SIMTEL.Client.Services;
@using StiQr_SIMTEL.Shared.LabelsQR;
@using System.IdentityModel.Tokens.Jwt;
@inject IAppService AppService;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;
<button type="button" class="btn btn-primary" @onclick="OpenPopup"><span class="oi oi-camera-slr" aria-hidden="true" /></button>
<br />
<div style="display: flex; flex-direction: column; align-items: center; text-align: center;">
    
    @if (_labelQrDetail == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" style="width: 5rem; height: 5rem; color:#144883; " role="status" />
        </div>
        <div class="d-flex justify-content-center">
            <p>@errorText</p>
        </div>
        
    }
    else
    {
        <div class="card text-center" style="width: 18rem;">
            @* <img class="card-img-top" style="background-color:yellow" src="" alt="Código QR"> *@
            <div class="card-body">
                <h3 class="card-title">Placa</h3>
                <h4 class="card-title">@_labelQrDetail.Plate</h4>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <h5>Último Check</h5>
                        <br />
                        @_labelQrDetail.LastMark
                    </li>
                    @if (isChecked)
                    {
                        <li class="list-group-item">
                            <h5>Tiempo Restante</h5>
                            <br />
                            <p>@minLeft Minuto(s)</p>
                        </li>
                    }
                    else
                    {
                        <li class="list-group-item">
                            <h5>Se ha exedido el tiempo</h5>
                            <br />
                            <p>Presiona Check para actualizarlo</p>
                        </li>
                    }
                </ul>
                @if (isChecked)
                {
                    <div class="card-body">
                        <span class="oi oi-thumb-up" aria-hidden="true"></span> Actualizado!
                    </div>
                }
                else
                {
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="CheckHourLabelQr">Check!</button>
                    </div>
                }
            </div>
        </div>
    }
</div>


@code {
    bool isChecked = false;
    string errorText = string.Empty;
    string _apiLabelURL = string.Empty;
    GetLabelQrDTO _labelQrDetail;
    int minLeft;
    UserBasicDetail userRecharger = new();
    UrlEncryptor encryptor = new("hola12345");


    public async void FindLabelQr(string url)
    {
        string userDetails = await SecureStorage.GetAsync(nameof(Setting.UserBasicDetail));

        if (!string.IsNullOrWhiteSpace(userDetails))
        {
            var userBasicDetail = JsonConvert.DeserializeObject<UserBasicDetail>(userDetails);
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(userBasicDetail.Token) as JwtSecurityToken;
            if (jsonToken.ValidTo > DateTime.UtcNow)
            {
                userRecharger = userBasicDetail;
            }
        }
        else
        {
            NavManager.NavigateTo("/LoginPage");
        }
        var response = await AppService.GetLabelQrByUrl(url);

        if (!String.IsNullOrWhiteSpace(response.ErrorMessage))
        {
            errorText = "Oops" + response.ErrorMessage;
        }
        else
        {
            _labelQrDetail = response.LabelQr;
            DateTime now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("America/Guayaquil"));
            minLeft = (int)Math.Round((_labelQrDetail.ExpiredDateMark - now).TotalMinutes);
            if (minLeft > 0)
            {
                isChecked = true;
            }
        }
    }
    public async void CheckHourLabelQr()
    {
        CheckHourDTO checkHour = new CheckHourDTO
            {
                LastMark = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("America/Guayaquil")),
                IdLabelQr = _labelQrDetail.Id,
                IdUserRecharger = userRecharger.UserID,
        };
        var response = await AppService.CheckHourLabelQr(checkHour);
        if (!String.IsNullOrWhiteSpace(response.ErrorMessage))
        {
            await App.Current.MainPage.DisplayAlert("Oops", response.ErrorMessage, "OK");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("location.reload");
            await App.Current.MainPage.DisplayAlert("Genial", response.ConfirmMessage, "OK");

        }
    }
    private async void OpenPopup()
    {
        var result = await App.Current.MainPage.ShowPopupAsync(new CameraPopup());
        if (result != null)
        {
            string resultstr= result.ToString();
            string decryptstr = encryptor.DecryptUrl(resultstr);
            if (!decryptstr.Contains("/api/LabelsQr/GetLabelsQrById"))
            {
                errorText = "Este código QR no corresponde a una etiqueta SIMTEL";
            }
            else
            {
                FindLabelQr(resultstr);
            }

        }
        StateHasChanged();
    }
}
